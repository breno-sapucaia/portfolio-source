{"version":3,"sources":["main/resources/components/button-mask/ButtonMask.jsx","main/resources/components/header/Header.jsx","main/resources/components/typed/Typed.jsx","main/resources/components/monitor/Monitor.jsx","main/App.jsx","serviceWorker.js","index.js"],"names":["props","href","navigation","className","classes","children","Fragment","textContet","Type","options","strings","this","typeSpeed","backSpeed","loop","typed","Typed","el","ref","Component","Monitor","id","App","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAEe,G,YAAA,SAAAA,GACX,OACI,uBAAGC,KAAMD,EAAME,WAAYC,UAAS,gBAAWH,EAAMI,UAChDJ,EAAMK,SAAWL,EAAMK,SAEhB,kBAAC,IAAMC,SAAP,KACI,0BAAMH,UAAU,YAAYH,EAAMO,YAClC,0BAAMJ,UAAU,kBAAkBH,EAAMO,gBCNjD,WAAAP,GACX,OACI,4BAAQG,UAAU,UAEd,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,kBAAC,EAAD,CAAYC,QAAQ,WAAWF,WAAW,KACtC,0BAAMC,UAAU,YAAhB,SAAiC,0BAAMA,UAAU,gBAAhB,aACjC,0BAAMA,UAAU,kBAAhB,YAA0C,0BAAMA,UAAU,gBAAhB,QAE9C,yBAAKA,UAAU,4CACX,kBAAC,EAAD,CAAYD,WAAW,QAAQK,WAAW,OAAOH,QAAQ,SACzD,kBAAC,EAAD,CAAYF,WAAW,UAAUK,WAAW,SAASH,QAAQ,SAC7D,kBAAC,EAAD,CAAYF,WAAW,UAAUK,WAAW,SAASH,QAAQ,SAC7D,kBAAC,EAAD,CAAYF,WAAW,WAAWK,WAAW,UAAUH,QAAQ,c,wBCUxEI,E,4LAvBU,IAGXC,EAAU,CACZC,QAHgBC,KAAKX,MAAjBU,QAIJE,UAAW,GACXC,UAAW,GACXC,MAAM,GAEVH,KAAKI,MAAQ,IAAIC,IAAML,KAAKM,GAAIR,K,+BAG1B,IAAD,OACL,OACI,sCACA,0BAAMS,IAAK,SAACD,GAAS,EAAKA,GAAKA,U,GAjBxBE,aCmBbT,EAAU,CACZ,8EACA,gEACA,gFAEWU,EAtBC,SAACpB,GACb,OACI,6BAASG,UAAU,UACf,yBAAKA,UAAU,WACX,yBAAKA,UAAU,sBACX,uBAAGkB,GAAG,OAAOlB,UAAU,2BAAvB,uBAEI,0BAAMA,UAAU,eAAhB,qBACA,6BACA,0BAAMA,UAAU,cAAhB,KAA+B,kBAACa,EAAD,CAAON,QAASA,KAJnD,KAKA,iCCmBLY,G,kBA1BX,WAAYtB,GAAQ,IAAD,8BACf,4CAAMA,KACDuB,MAAQ,GAFE,E,sEAMf,OACI,yBAAKpB,UAAU,OACX,yBAAKA,UAAU,sBACf,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACX,6BAASA,UAAU,kBACf,kBAAC,EAAD,a,GAbNgB,c,MCMEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.703b8e29.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ButtonMask.css'\r\nexport default props => {\r\n    return (\r\n        <a href={props.navigation} className={`a-btn ${props.classes}`}>\r\n            {props.children ? props.children :\r\n                (\r\n                    <React.Fragment>\r\n                        <span className=\"mask-lnk\">{props.textContet}</span>\r\n                        <span className=\"mask-lnk-hover\">{props.textContet}</span>\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n        </a>\r\n\r\n\r\n    );\r\n};","import React from 'react';\r\nimport './Header.css'\r\nimport ButtonMask from './../button-mask/ButtonMask'\r\nexport default props => {\r\n    return (\r\n        <header className=\"header\">\r\n\r\n            <div className=\"container\">\r\n                <div className=\"row c-row\">\r\n                    <ButtonMask classes=\"col-md-2\" navigation=\"#\">\r\n                        <span className=\"mask-lnk\">Breno <span className=\"text-c-white\">Sapucaia</span></span>\r\n                        <span className=\"mask-lnk-hover\">Download <span className=\"text-c-white\">CV</span></span>\r\n                    </ButtonMask>\r\n                    <nav className=\"col-md-10 d-flex  justify-content-md-end\">\r\n                        <ButtonMask navigation=\"#Home\" textContet=\"Home\" classes=\"mr-5\" />\r\n                        <ButtonMask navigation=\"#Resume\" textContet=\"Resume\" classes=\"mr-5\" />\r\n                        <ButtonMask navigation=\"#Skills\" textContet=\"Skills\" classes=\"mr-5\" />\r\n                        <ButtonMask navigation=\"#Contact\" textContet=\"Contact\" classes=\"mr-5\" />\r\n                    </nav>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n        </header>\r\n    );\r\n}","import React, { Component } from 'react';\r\nimport Typed from 'typed.js'\r\nclass Type extends Component {\r\n    \r\n    componentDidMount() {\r\n        const { strings } = this.props;\r\n    \r\n        const options = {\r\n            strings,\r\n            typeSpeed: 50,\r\n            backSpeed: 50,\r\n            loop: true\r\n        }\r\n        this.typed = new Typed(this.el, options);\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <span>I&nbsp;\r\n            <span ref={(el) => { this.el = el; }}>\r\n\r\n            </span>\r\n            </span>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Type;","import React from 'react';\r\nimport './Moniotr.css'\r\nimport Typed from './../typed/Typed'\r\n\r\nconst Monitor = (props) => {\r\n    return (\r\n        <section className=\"center\">\r\n            <div className=\"monitor\">\r\n                <div className=\"monitor-background\">\r\n                    <p id=\"text\" className=\"m-0 p-1 pt-2 text-green\">\r\n                        Breno@PORTFOLIO &nbsp;\r\n                        <span className=\"text-yellow\">~/breno.github.io</span>\r\n                        <br />\r\n                        <span className=\"text-white\">$ <Typed strings={strings}/></span> </p>\r\n                    <br/>\r\n                    \r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\nconst strings = [\r\n    'love learn <strong style=\"color:#7be5de\"> programing </strong> ‚ù§Ô∏è',\r\n    'like play <i style=\"color:orange\">basketball</i> üèÄ',\r\n    'definitly drink <i><strong style=\"color:#bc7e01\">Coffee </strong></i> ‚òï'\r\n]\r\nexport default Monitor;","import React, { Component } from 'react';\r\n// eslint-disable-next-line\r\nimport Header from './resources/components/header/Header'\r\nimport Monitor from './resources/components/monitor/Monitor'\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <div className=\"custom-background\"></div>\r\n                <Header />\r\n                <div className=\"main\">\r\n                    <section className=\"section-center\">\r\n                        <Monitor />\r\n                    </section>\r\n\r\n\r\n                    {/* <Typed strings={strings} /> */}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n// eslint-disable-next-line\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './main/App.jsx';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( <App/> , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}